#General
title=ServiceSnipper

#SideMenu-Graph
graphconfig.header=Configurations
graphconfig.exec=Solve Graph
#SideMenu-Graph-TabMenu-1
graphconfig.config1.header=Community Algorithm
graphconfig.config1.select=Algorithms
graphconfig.config1.prompt=Select
graphconfig.config1.settings=Settings
graphconfig.config1.deterministic=Deterministic
graphconfig.config1.GIRVAN_NEWMAN=The Girvan & Newman algorithm detects communities by progressively removing edges from the original network. Hierarchical method.
graphconfig.config1.LEUNG=Each node in the network chooses to join the community to which the maximum number of its neighbors belong to, with ties broken uniformly randomly.
graphconfig.config1.CHINESE_WHISPERS=Chinese whispers is a hard partitioning, randomized, flat clustering method. All of the network nodes are selected one by one in a random order. Every node moves to the class which the given node connects with the most links.
graphconfig.config1.MARKOV=The Markov Clustering algorithm (MCL) walks randomly through the graph. It is more likely to move around the same cluster than separated networks. Clusters are internally dense while being separated by sparse regions.
graphconfig.config1.NUMBER_CLUSTERS=Number of clusters
graphconfig.config1.NUMBER_CLUSTERS.tooltip=Predefined value of how many clusters should be generated
graphconfig.config1.LEUNG_PARAM_M=M
graphconfig.config1.LEUNG_PARAM_M.tooltip=Comparable node characteristic preference exponent
graphconfig.config1.LEUNG_PARAM_DELTA=Delta
graphconfig.config1.LEUNG_PARAM_DELTA.tooltip=Hop attenuation factor
graphconfig.config1.CHINESE_WHISPERS_NODE_WEIGHT=Node weighting approach
graphconfig.config1.CHINESE_WHISPERS_NODE_WEIGHT.tooltip=The node weighting approach that chooses the with the highest total edge weight in the neighborhood. [Top] Divided by the (logarithm [LOG]) of the neighbor node degree. [LIN]
graphconfig.config1.MARKOV_NUMBER_OF_EXPANSIONS=Expansion parameter
graphconfig.config1.MARKOV_NUMBER_OF_EXPANSIONS.tooltip=The expansion parameter defines the degree of the matrix
graphconfig.config1.MARKOV_POWER_COEFFICENT=Inflation parameter.
graphconfig.config1.MARKOV_POWER_COEFFICENT.tooltip=Power coefficient at inflation step.
#SideMenu-Graph-TabMenu-2
graphconfig.config2.header=Priorities

graphconfig.config2.cohesiveness=Cohesiveness
graphconfig.config2.cohesiveness.tooltip=Criteria describing certain common properties of mutually related Instances that justify why these Instances should belong to the same service
graphconfig.config2.compatibility=Compatibility
graphconfig.config2.compatibility.tooltip=Criteria indicating divergent characteristics of Instances. A service should not contain Instances with incompatible characteristics.
graphconfig.config2.constraints=Constraints
graphconfig.config2.constraints.tooltip=Criteria specifying high-impact requirements that enforce that certain groups of Instances a) must jointly constitute a dedicated service or b) must be distributed amongst different services

graphconfig.config2.identity_lifecycle=Identity Lifecycle
graphconfig.config2.identity_lifecycle.tooltip=Instances that belong to the same identity and therefore share a common lifecycle.
graphconfig.config2.semantic_proximity=Semantic Proximity
graphconfig.config2.semantic_proximity.tooltip=Two Instances are semantically proximate when they have a semantic connection given by the business domain.
graphconfig.config2.shared_owner=Shared Owner
graphconfig.config2.shared_owner.tooltip=Same Entity is responsible for a group of Instances. Service decomposition should try to keep entities with the same responsible role together while not mixing entities with different responsible instances in one service.
graphconfig.config2.structural_volatility=Structural Volatility
graphconfig.config2.structural_volatility.tooltip=How often change requests need to be implemented affecting Instances.
graphconfig.config2.latency=Latency
graphconfig.config2.latency.tooltip=Groups of Instances with high performance requirements for a specific user request.
graphconfig.config2.consistency_criticality=Consistency Criticality
graphconfig.config2.consistency_criticality.tooltip= Some data such as financial records loses its value in case of inconsistencies while other data is more tolerant to inconsistencies.
graphconfig.config2.availability_criticality=Availability Criticality
graphconfig.config2.availability_criticality.tooltip=Instances have varying availability constraints. Some are critical while others can be unavailable for some time. As providing high availability comes at a cost, Instances classified with different characteristics should not be composed in the same service
graphconfig.config2.content_volatility=Content Volatility
graphconfig.config2.content_volatility.tooltip=A Instance can be classified by its volatility which defines how frequent it is updated.
graphconfig.config2.consistency_constraint=Consistency Constraint
graphconfig.config2.consistency_constraint.tooltip=A group of Instances that have a dependent state and therefore need to be kept consistent to each other.
graphconfig.config2.storage_similarity=Storage Similarity
graphconfig.config2.storage_similarity.tooltip=Storage that is required to persist all instances of a Instance.
graphconfig.config2.predefined_service_constraint=Predefined Service
graphconfig.config2.predefined_service_constraint.tooltip=Instances forcefully need to be modeled in the same service
graphconfig.config2.security_contexuality=Security Contexuality
graphconfig.config2.security_contexuality.tooltip=A security role is allowed to see or process a group of Instances. Mixing security contexts in one service complicates authentication and authorization implementations.
graphconfig.config2.security_criticality=Security Criticality
graphconfig.config2.security_criticality.tooltip=Criticality of an Instance in case of data loss or a privacy violation. 
graphconfig.config2.security_constraint=Security Constraint
graphconfig.config2.security_constraint.tooltip=Groups of Instances are semantically related but must not reside in the same service in order to satisfy information security requirements. 

#SideMenu-Graph-TabMenu-3
graphconfig.config3.header=Visual Settings
graphconfig.config3.showLabels=Show Labels

#Content-Graph
graphvisual.tab1=Computed Graph
graphvisual.tab2=Resolved Cluster
graphvisual.header1=Graph
graphvisual.header2=Cluster
graphvisual.debug=Debugging
graphvisual.debug.next=Next
graphvisual.debug.previous=Previous
graphvisual.save=Save result
#Content-Graph-TabMenu-1
graphvisual.config1.header=Vertices
graphvisual.table.columnEntityContext=Context
graphvisual.table.columnEntityName=Name
#Content-Graph-TabMenu-2
graphvisual.config2.header=Edges
graphvisual.table.columnEntityA=A
graphvisual.table.columnEntityB=B
graphvisual.table.columnEdgeWeight=Weight
#Content-Graph-TabMenu-3
graphvisual.config3.header=Services
graphvisual.table.columnServiceName=Service Name
graphvisual.table.columnInstanceName=Instance
graphvisual.table.columnUseCaseName=UseCase
#Content-Graph-TabMenu-4
graphvisual.config4.header=ServiceRelations
graphvisual.table.serviceRelationDirection=Direction
graphvisual.table.serviceRelationSharedEntities=Shared Instances

graphvisual.recalcColours=New Colours

##############################
##############################
model.menu.entity=Create entity
model.menu.relationship=Create relationship
model.menu.useCase=Create usecase
model.menu.criteria=Create criteria
model.menu.compatibility=Create compatibility

model.visual.current=Current Model (editable)
model.visual.previous=Previous Model (static)
model.visual.appliedChange=Applied Changes to model
model.visual.details=Details

model.visual.discard=Skip
model.visual.save=Save

error.requiredMessage=Value is required

dialog.discard=Cancel
dialog.save=Save

dialog.header.entity=Entity
dialog.header.relationship=Relationship
dialog.header.useCase=Usecase
dialog.header.criteria=Criteria
dialog.header.compatibility=Compatibility

dialog.entity=Entity id
dialog.entity.tooltip=Provide the id of an entity (e.g class name)
dialog.relationship=Relationship Type
dialog.relationship.tooltip=Provide the relationship type between two entities 
dialog.instances=Instances
dialog.instances.tooltip=Provide a list of affected instances of this criteria
dialog.useCase=Usecase
dialog.useCase.tooltip=Provide the name of the usecase
dialog.latency=Latency Critical
dialog.latency.tooltip=Select if the mentioned usecase is performance critical or not
dialog.readInput=Input Instances
dialog.readInput.tooltip=List of instances, which are needed information for the use case
dialog.writeInput=Output instances
dialog.writeInput.tooltip=List of instances, which are changed during the operation
dialog.criteria=Criteria
dialog.criteria.tooltip=Select the criteria
dialog.criteria.name=Group name
dialog.criteria.name.tooltip=Provide a group name
dialog.characteristic=Characteristic
dialog.characteristic.tooltip=Set the characteristic to one of the provided values